# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-03-29 02:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: docs/basic-usage.md:1
#, no-wrap
msgid "Basic usage"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:5
msgid ""
"For the basic usage introduction we will be installing `pendulum`, a "
"datetime library.  If you have not yet installed Poetry, refer to the "
"[Introduction](/docs/) chapter."
msgstr ""

#. type: Title ##
#: docs/basic-usage.md:6
#, no-wrap
msgid "Project setup"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:9
msgid "First, let's create our new project, let's call it `poetry-demo`:"
msgstr ""

#. type: Code fence info string
#: docs/basic-usage.md:10 docs/basic-usage.md:60 docs/basic-usage.md:93
#, no-wrap
msgid "bash"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:10
#, no-wrap
msgid ""
"poetry new poetry-demo\n"
"\n"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:15
msgid "This will create the `poetry-demo` directory with the following content:"
msgstr ""

#. type: Code fence info string
#: docs/basic-usage.md:16
#, no-wrap
msgid "text"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:16
#, no-wrap
msgid ""
"poetry-demo\n"
"\n"
"├── pyproject.toml\n"
"\n"
"├── README.rst\n"
"\n"
"├── poetry_demo\n"
"\n"
"│   └── __init__.py\n"
"\n"
"└── tests\n"
"\n"
"    ├── __init__.py\n"
"\n"
"    └── test_poetry_demo.py\n"
"\n"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:29
msgid ""
"The `pyproject.toml` file is what is the most important here. This will "
"orchestrate your project and its dependencies. For now, it looks like this:"
msgstr ""

#. type: Code fence info string
#: docs/basic-usage.md:30 docs/basic-usage.md:48
#, no-wrap
msgid "toml"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:30
#, no-wrap
msgid ""
"[tool.poetry]\n"
"\n"
"name = \"poetry-demo\"\n"
"\n"
"version = \"0.1.0\"\n"
"\n"
"description = \"\"\n"
"\n"
"authors = [\"Sébastien Eustace <sebastien@eustace.io>\"]\n"
"\n"
"\n"
"\n"
"[tool.poetry.dependencies]\n"
"\n"
"python = \"*\"\n"
"\n"
"\n"
"\n"
"[tool.poetry.dev-dependencies]\n"
"\n"
"pytest = \"^3.4\"\n"
"\n"
msgstr ""

#. type: Title ###
#: docs/basic-usage.md:44
#, no-wrap
msgid "Specifying dependencies"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:47
msgid ""
"If you want to add dependencies to your project, you can specify them in the "
"`tool.poetry.dependencies` section."
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:48
#, no-wrap
msgid ""
"[tool.poetry.dependencies]\n"
"\n"
"pendulum = \"^1.4\"\n"
"\n"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:54
msgid ""
"As you can see, it takes a mapping of **package names** and **version "
"constraints**."
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:57
msgid ""
"Poetry uses this information to search for the right set of files in package "
"\"repositories\" that you register in the `tool.poetry.repositories` "
"section, or on [PyPI](https://pypi.org) by default."
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:59
msgid ""
"Also, instead of modifying the `pyproject.toml` file by hand, you can use "
"the `add` command."
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:60
#, no-wrap
msgid ""
"$ poetry add pendulum\n"
"\n"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:65
msgid ""
"It will automatically find a suitable version constraint **and install** the "
"package and subdependencies."
msgstr ""

#. type: Title ###
#: docs/basic-usage.md:67
#, no-wrap
msgid "Version constraints"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:71
#, no-wrap
msgid ""
"In our example, we are requesting the `pendulum` package with the version "
"constraint `^1.4`.\n"
"This means any version greater or equal to 1.4.0 and less than 2.0.0 "
"(`>=1.4.0 <2.0.0`).\n"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:74
msgid ""
"Please read [Dependency specification](/docs/dependency-specification) for "
"more in-depth information on versions, how versions relate to each other, "
"and on the different ways you can specify dependencies."
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:77 docs/basic-usage.md:134 docs/basic-usage.md:148
msgid "!!!note"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:79
#, no-wrap
msgid "    **How does Poetry download the right files?**\n"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:84
#, no-wrap
msgid ""
"    When you specify a dependency in `pyproject.toml`, Poetry first take the "
"name of the package\n"
"    that you have requested and searches for it in any repository you have "
"registered using the `repositories` key.\n"
"    If you have not registered any extra repositories, or it does not find a "
"package with that name in the\n"
"    repositories you have specified, it falls back on PyPI.\n"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:87
#, no-wrap
msgid ""
"    When Poetry finds the right package, it then attempts to find the best "
"match\n"
"    for the version constraint you have specified.\n"
msgstr ""

#. type: Title ##
#: docs/basic-usage.md:89
#, no-wrap
msgid "Installing dependencies"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:92
msgid ""
"To install the defined dependencies for your project, just run the `install` "
"command."
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:93
#, no-wrap
msgid ""
"poetry install\n"
"\n"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:98
msgid "When you run this command, one of two things may happen:"
msgstr ""

#. type: Title ###
#: docs/basic-usage.md:99
#, no-wrap
msgid "Installing without `poetry.lock`"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:103
msgid ""
"If you have never run the command before and there is also no `poetry.lock` "
"file present, Poetry simply resolves all dependencies listed in your "
"`pyproject.toml` file and downloads the latest version of their files."
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:107
msgid ""
"When Poetry has finished installing, it writes all of the packages and the "
"exact versions of them that it downloaded to the `poetry.lock` file, locking "
"the project to those specific versions.  You should commit the `poetry.lock` "
"file to your project repo so that all people working on the project are "
"locked to the same versions of dependencies (more below)."
msgstr ""

#. type: Title ###
#: docs/basic-usage.md:109
#, no-wrap
msgid "Installing with `poetry.lock`"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:114
msgid ""
"This brings us to the second scenario. If there is already a `poetry.lock` "
"file as well as a `pyproject.toml` file when you run `poetry install`, it "
"means either you ran the `install` command before, or someone else on the "
"project ran the `install` command and committed the `poetry.lock` file to "
"the project (which is good)."
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:121
msgid ""
"Either way, running `install` when a `poetry.lock` file is present resolves "
"and installs all dependencies that you listed in `pyproject.toml`, but "
"Poetry uses the exact versions listed in `poetry.lock` to ensure that the "
"package versions are consistent for everyone working on your project.  As a "
"result you will have all dependencies requested by your `pyproject.toml` "
"file, but they may not all be at the very latest available versions (some of "
"the dependencies listed in the `poetry.lock` file may have released newer "
"versions since the file was created).  This is by design, it ensures that "
"your project does not break because of unexpected changes in dependencies."
msgstr ""

#. type: Title ###
#: docs/basic-usage.md:122
#, no-wrap
msgid "Commit your `poetry.lock` file to version control"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:132
msgid ""
"Committing this file to VC is important because it will cause anyone who "
"sets up the project to use the exact same versions of the dependencies that "
"you are using.  Your CI server, production machines, other developers in "
"your team, everything and everyone runs on the same dependencies, which "
"mitigates the potential for bugs affecting only some parts of the "
"deployments.  Even if you develop alone, in six months when reinstalling the "
"project you can feel confident the dependencies installed are still working "
"even if your dependencies released many new versions since then.  (See note "
"below about using the update command.)"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:136
#, no-wrap
msgid "    For libraries it is not necessary to commit the lock file.\n"
msgstr ""

#. type: Title ##
#: docs/basic-usage.md:138
#, no-wrap
msgid "Updating dependencies to their latest versions"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:146
msgid ""
"As mentioned above, the `poetry.lock` file prevents you from automatically "
"getting the latest versions of your dependencies.  To update to the latest "
"versions, use the `update` command.  This will fetch the latest matching "
"versions (according to your `pyproject.toml` file)  and update the lock file "
"with the new versions.  (This is equivalent to deleting the `poetry.lock` "
"file and running `install` again.)"
msgstr ""

#. type: Plain text
#: docs/basic-usage.md:150
#, no-wrap
msgid ""
"    Poetry will display a **Warning** when executing an install command if "
"`poetry.lock` and `pyproject.toml`\n"
"    are not synchronized.\n"
msgstr ""
