# Kotone Potts <acedraingon@yahoo.co.jp>, 2019. #zanata
# cocoatomo <cocoatomo77@gmail.com>, 2019. #zanata
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-04-09 08:57+0900\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"PO-Revision-Date: 2019-07-05 04:01+0000\n"
"Last-Translator: Copied by Zanata <copied-by-zanata@zanata.org>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"X-Generator: Zanata 4.6.2\n"
"Plural-Forms: nplurals=1; plural=0\n"

#. type: Title #
#: docs/basic-usage.md:1
#, no-wrap
msgid "Basic usage"
msgstr "基本的な使い方"

#. type: Plain text
#: docs/basic-usage.md:5
msgid ""
"For the basic usage introduction we will be installing `pendulum`, a "
"datetime library.  If you have not yet installed Poetry, refer to the "
"[Introduction](/docs/) chapter."
msgstr ""
"基本的な使い方の入門として、 `pendulum` という日付ライブラリをインストールします。\n"
"Poetryをまだインストールしていない場合は、 [Introduction](/poetry-ja/) の章を参照してください。"

#. type: Title ##
#: docs/basic-usage.md:6
#, no-wrap
msgid "Project setup"
msgstr "プロジェクトのセットアップ"

#. type: Plain text
#: docs/basic-usage.md:9
msgid "First, let's create our new project, let's call it `poetry-demo`:"
msgstr "最初に、新しいプロジェクトを作成し、 `poetry-demo` と名付けましょう:"

#. type: Code fence info string
#: docs/basic-usage.md:10 docs/basic-usage.md:60 docs/basic-usage.md:92
#, no-wrap
msgid "bash"
msgstr "bash"

#. type: Plain text
#: docs/basic-usage.md:10
#, no-wrap
msgid "poetry new poetry-demo\n"
"\n"
msgstr "poetry new poetry-demo\n"

#. type: Plain text
#: docs/basic-usage.md:15
msgid ""
"This will create the `poetry-demo` directory with the following content:"
msgstr "このコマンドは、次の内容を持つ `poetry-demo` ディレクトリを作成します:"

#. type: Code fence info string
#: docs/basic-usage.md:16
#, no-wrap
msgid "text"
msgstr "text"

#. type: Plain text
#: docs/basic-usage.md:16
#, no-wrap
msgid ""
"poetry-demo\n"
"\n"
"├── pyproject.toml\n"
"\n"
"├── README.rst\n"
"\n"
"├── poetry_demo\n"
"\n"
"│   └── __init__.py\n"
"\n"
"└── tests\n"
"\n"
"    ├── __init__.py\n"
"\n"
"    └── test_poetry_demo.py\n"
"\n"
msgstr ""
"poetry-demo\n"
"├── pyproject.toml\n"
"├── README.rst\n"
"├── poetry_demo\n"
"│   └── __init__.py\n"
"└── tests\n"
"    ├── __init__.py\n"
"    └── test_poetry_demo.py\n"

#. type: Plain text
#: docs/basic-usage.md:29
msgid ""
"The `pyproject.toml` file is what is the most important here. This will "
"orchestrate your project and its dependencies. For now, it looks like this:"
msgstr ""
"`pyproject.toml` ファイルがここでは最も重要なものです。\n"
"このファイルが、プロジェクトの依存関係を統括します。\n"
"今のところの中身は、このようになっています:"

#. type: Code fence info string
#: docs/basic-usage.md:30 docs/basic-usage.md:48
#, no-wrap
msgid "toml"
msgstr "toml"

#. type: Plain text
#: docs/basic-usage.md:30
#, no-wrap
msgid ""
"[tool.poetry]\n"
"\n"
"name = \"poetry-demo\"\n"
"\n"
"version = \"0.1.0\"\n"
"\n"
"description = \"\"\n"
"\n"
"authors = [\"Sébastien Eustace <sebastien@eustace.io>\"]\n"
"\n"
"\n"
"\n"
"[tool.poetry.dependencies]\n"
"\n"
"python = \"*\"\n"
"\n"
"\n"
"\n"
"[tool.poetry.dev-dependencies]\n"
"\n"
"pytest = \"^3.4\"\n"
"\n"
msgstr ""
"[tool.poetry]\n"
"name = \"poetry-demo\"\n"
"version = \"0.1.0\"\n"
"description = \"\"\n"
"authors = [\"Sébastien Eustace <sebastien@eustace.io>\"]\n"
"\n"
"[tool.poetry.dependencies]\n"
"python = \"*\"\n"
"\n"
"[tool.poetry.dev-dependencies]\n"
"pytest = \"^3.4\"\n"

#. type: Title ###
#: docs/basic-usage.md:44
#, no-wrap
msgid "Specifying dependencies"
msgstr "依存関係の指定"

#. type: Plain text
#: docs/basic-usage.md:47
msgid ""
"If you want to add dependencies to your project, you can specify them in the "
"`tool.poetry.dependencies` section."
msgstr "プロジェクトに依存関係を追加したい場合は、 `tool.poetry.dependencies` セクションに指定できます。"

#. type: Plain text
#: docs/basic-usage.md:48
#, no-wrap
msgid "[tool.poetry.dependencies]\n"
"\n"
"pendulum = \"^1.4\"\n"
"\n"
msgstr "[tool.poetry.dependencies]\n"
"pendulum = \"^1.4\"\n"

#. type: Plain text
#: docs/basic-usage.md:54
msgid ""
"As you can see, it takes a mapping of **package names** and **version "
"constraints**."
msgstr "見て分かるように、このセクションには **パッケージ名** と **バージョン制約** の対応付けを書きます。"

#. type: Plain text
#: docs/basic-usage.md:57
msgid ""
"Poetry uses this information to search for the right set of files in package "
"\"repositories\" that you register in the `tool.poetry.repositories` "
"section, or on [PyPI](https://pypi.org) by default."
msgstr ""
"Poetryはこの情報を使い、 `tool.poetry.repositories` セクションに登録されたパッケージ \"レポジトリ\" "
"もしくはデフォルトの [PyPI](https://pypi.org) から、正しいファイル群を検索します。"

#. type: Plain text
#: docs/basic-usage.md:59
msgid ""
"Also, instead of modifying the `pyproject.toml` file by hand, you can use "
"the `add` command."
msgstr "`pyproject.toml` ファイルを手で編集する変わりに、 `add` コマンドも使えます。"

#. type: Plain text
#: docs/basic-usage.md:60
#, no-wrap
msgid "$ poetry add pendulum\n"
"\n"
msgstr "$ poetry add pendulum\n"

#. type: Plain text
#: docs/basic-usage.md:65
msgid ""
"It will automatically find a suitable version constraint **and install** the "
"package and subdependencies."
msgstr "このコマンドは自動的に適切なバージョン制約を見付け、パッケージとその依存関係を **インストールします** 。"

#. type: Title ###
#: docs/basic-usage.md:67
#, no-wrap
msgid "Version constraints"
msgstr "バージョン制約"

#. type: Plain text
#: docs/basic-usage.md:71
#, no-wrap
msgid ""
"In our example, we are requesting the `pendulum` package with the version "
"constraint `^1.4`.\n"
"This means any version greater or equal to 1.4.0 and less than 2.0.0 (`>=1.4."
"0 <2.0.0`).\n"
msgstr ""
"今の例では、 `^1.4` というバージョン制約の付いた  `pendulum` パッケージを要求しています。\n"
"この制約は、1.4.0以上かつ2.0.0未満のバージョンという意味です (`>=1.4.0 <2.0.0`)。\n"

#. type: Plain text
#: docs/basic-usage.md:73
msgid ""
"Please read [versions](/docs/versions/) for more in-depth information on "
"versions, how versions relate to each other, and on version constraints."
msgstr ""
"バージョンやバージョンどうしの関係、バージョン制約について、より深いことについては [versions](/poetry-ja/versions/) "
"を読んでください。"

#. type: Plain text
#: docs/basic-usage.md:76 docs/basic-usage.md:133 docs/basic-usage.md:147 docs/basic-usage.md:159
msgid "!!!note"
msgstr "!!!注意"

#. type: Plain text
#: docs/basic-usage.md:78
#, no-wrap
msgid "    **How does Poetry download the right files?**\n"
msgstr "    **Poetryはどうやって正しいファイルをダウンロードするのか?**\n"

#. type: Plain text
#: docs/basic-usage.md:83
#, no-wrap
msgid ""
"    When you specify a dependency in `pyproject.toml`, Poetry first take the "
"name of the package\n"
"    that you have requested and searches for it in any repository you have "
"registered using the `repositories` key.\n"
"    If you have not registered any extra repositories, or it does not find a "
"package with that name in the\n"
"    repositories you have specified, it falls back on PyPI.\n"
msgstr ""
"    `pyproject.toml` に依存関係を指定しているとき、Poetryはまず最初に要求されたパッケージ名を取り出し、\n"
"    `repositories` キーに登録されたレポジトリを検索します。\n"
"    追加のレポジトリを登録していないか、指定したレポジトリから要求された名前の\n"
"    パッケージが見付からない場合は、PyPIに戻って検索します。\n"

#. type: Plain text
#: docs/basic-usage.md:86
#, no-wrap
msgid ""
"    When Poetry finds the right package, it then attempts to find the best "
"match\n"
"    for the version constraint you have specified.\n"
msgstr "    Poetryが正しいパッケージを複数見付けたときは、指定されたバージョン制約に\n"
"    最も適合するものを見付けようとします。\n"

#. type: Title ##
#: docs/basic-usage.md:88
#, no-wrap
msgid "Installing dependencies"
msgstr "依存関係のインストール"

#. type: Plain text
#: docs/basic-usage.md:91
msgid ""
"To install the defined dependencies for your project, just run the `install` "
"command."
msgstr "プロジェクトに定義された依存関係をインストールするには、 `install` コマンドを実行するだけです。"

#. type: Plain text
#: docs/basic-usage.md:92
#, no-wrap
msgid "poetry install\n"
"\n"
msgstr "poetry install\n"

#. type: Plain text
#: docs/basic-usage.md:97
msgid "When you run this command, one of two things may happen:"
msgstr "このコマンドを実行すると、2つのうちどちらかが起こります:"

#. type: Title ###
#: docs/basic-usage.md:98
#, no-wrap
msgid "Installing without `poetry.lock`"
msgstr "`poetry.lock` 無しのインストール"

#. type: Plain text
#: docs/basic-usage.md:102
msgid ""
"If you have never run the command before and there is also no `poetry.lock` "
"file present, Poetry simply resolves all dependencies listed in your "
"`pyproject.toml` file and downloads the latest version of their files."
msgstr ""
"以前にこのコマンドを実行したことが無く、 `poetry.lock` ファイルも存在しない場合は、Poetryは `pyproject.toml` "
"に並べられた全ての依存関係を解決し、それらのファイルの最新バージョンをダウンロードするだけです。"

#. type: Plain text
#: docs/basic-usage.md:106
msgid ""
"When Poetry has finished installing, it writes all of the packages and the "
"exact versions of them that it downloaded to the `poetry.lock` file, locking "
"the project to those specific versions.  You should commit the `poetry.lock` "
"file to your project repo so that all people working on the project are "
"locked to the same versions of dependencies (more below)."
msgstr ""
"Poetryがインストールを完了すると、ダウンロードしたパッケージとその正確なバージョンを `poetry.lock` "
"へ書き込み、その特定のバージョンでプロジェクトを固定します。\n"
"プロジェクトレポジトリに `poetry.lock` "
"ファイルをコミットし、このプロジェクトに携わる全ての人にとって、同じバージョンの依存関係を強制されるべきです (下でさらに解説します)。"

#. type: Title ###
#: docs/basic-usage.md:108
#, no-wrap
msgid "Installing with `poetry.lock`"
msgstr "`poetry.lock` 有りのインストール"

#. type: Plain text
#: docs/basic-usage.md:113
msgid ""
"This brings us to the second scenario. If there is already a `poetry.lock` "
"file as well as a `pyproject.toml` file when you run `poetry install`, it "
"means either you ran the `install` command before, or someone else on the "
"project ran the `install` command and committed the `poetry.lock` file to "
"the project (which is good)."
msgstr ""
"こちらの場合は先程とは別の第2のシナリオになります。\n"
"`poetry install` を実行するときに、 `pyproject.toml` に加えて既に `poetry.lock` "
"ファイルがある場合は、以前に `install` コマンドを実行していたか、誰か他の人がそのプロジェクトで `install` コマンドを実行し "
"`poetry.lock` ファイルをプロジェクトにコミット (これは良い行いです) していたことになります。"

#. type: Plain text
#: docs/basic-usage.md:120
msgid ""
"Either way, running `install` when a `poetry.lock` file is present resolves "
"and installs all dependencies that you listed in `pyproject.toml`, but "
"Poetry uses the exact versions listed in `poetry.lock` to ensure that the "
"package versions are consistent for everyone working on your project.  As a "
"result you will have all dependencies requested by your `pyproject.toml` "
"file, but they may not all be at the very latest available versions (some of "
"the dependencies listed in the `poetry.lock` file may have released newer "
"versions since the file was created).  This is by design, it ensures that "
"your project does not break because of unexpected changes in dependencies."
msgstr ""
"どちらにせよ、 `poetry.lock` ファイルがあるときに `install` コマンドを実行すると `pyproject.toml` "
"に並べた全ての依存関係を解決しインストールしますが、Poetryは `poetry.lock` "
"に並べられた正確なバージョンを使い、プロジェクトに携わる全ての人にとってパッケージバージョンが一貫性を持つことを保証します。\n"
"その結果として、 `pyproject.toml` "
"ファイルで要求された全ての依存関係が手に入りますが、必ずしも全ての依存関係が利用可能な最新バージョンではないかもしれません (`poetry.lock` "
"ファイルに並べられている依存関係のうちいくつかは、そのファイルが作成された後により新しいバージョンがリリースされているかもしれません)。\n"
"これは設計によるもので、プロジェクトが予期せぬ依存関係の変更で壊れないことを保証するものです。"

#. type: Title ###
#: docs/basic-usage.md:121
#, no-wrap
msgid "Commit your `poetry.lock` file to version control"
msgstr "`poetry.lock` ファイルをバージョン管理にコミット"

#. type: Plain text
#: docs/basic-usage.md:131
msgid ""
"Committing this file to VC is important because it will cause anyone who "
"sets up the project to use the exact same versions of the dependencies that "
"you are using.  Your CI server, production machines, other developers in "
"your team, everything and everyone runs on the same dependencies, which "
"mitigates the potential for bugs affecting only some parts of the "
"deployments.  Even if you develop alone, in six months when reinstalling the "
"project you can feel confident the dependencies installed are still working "
"even if your dependencies released many new versions since then.  (See note "
"below about using the update command.)"
msgstr ""
"このファイルをVC (Version Control) "
"にコミットするのが重要なのは、あなたが使っているバージョンと厳密に同じバージョンの依存関係を、プロジェクトをセットアップする人が使うようにするためです。\n"
"あなたのCIサーバー、本番機、チームの他の開発者、全てのもの、全ての人が同じ依存関係の上で実行することで、配置物の一部だけに影響するバグが起きる恐れを軽減します。\n"
"6ヶ月間1人で開発をしたとしても、プロジェクトを再インストールするときには、インストールされた依存関係は今でも正常に動作すると確信を持てます。たとえ依存関係に多くの新バージョンがリリースされていたとしてもです。\n"
"(下にあるupdateコマンドの使い方についての注意書きを参照してください。)"

#. type: Plain text
#: docs/basic-usage.md:135
#, no-wrap
msgid "    For libraries it is not necessary to commit the lock file.\n"
msgstr "    ライブラリについては、ロックファイルをコミットするのは必須ではありません。\n"

#. type: Title ##
#: docs/basic-usage.md:137
#, no-wrap
msgid "Updating dependencies to their latest versions"
msgstr "依存関係の最新バージョンへの更新"

#. type: Plain text
#: docs/basic-usage.md:145
msgid ""
"As mentioned above, the `poetry.lock` file prevents you from automatically "
"getting the latest versions of your dependencies.  To update to the latest "
"versions, use the `update` command.  This will fetch the latest matching "
"versions (according to your `pyproject.toml` file)  and update the lock file "
"with the new versions.  (This is equivalent to deleting the `poetry.lock` "
"file and running `install` again.)"
msgstr ""
"上で言及したように、 `poetry.lock` ファイルは依存関係の最新バージョンを自動的に取得してしまうのを防止します。\n"
"最新バージョンへ更新するには、 `update` コマンドを使ってください。\n"
"このコマンドは適合する最新バージョンを (`pyproject.toml` ファイルに従って) "
"取ってきて、ロックファイルを新しいバージョンで更新します。\n"
"(この動作は、 `poetry.lock` ファイルを削除してから、改めて `install` を実行するのと同等です。)"

#. type: Plain text
#: docs/basic-usage.md:150
#, no-wrap
msgid ""
"    Poetry will display a **Warning** when executing an install command if "
"`poetry.lock` and `pyproject.toml`\n"
"    are not synchronized.\n"
msgstr ""
"    Poetryは、installコマンドを実行するときに `poetry.lock` と `pyproject.toml` "
"が同期されていない場合、\n"
"    **警告** を表示します。\n"

#. type: Title ##
#: docs/basic-usage.md:152
#, no-wrap
msgid "Poetry and virtualenvs"
msgstr "Poetryと仮想環境"

#. type: Plain text
#: docs/basic-usage.md:157
msgid ""
"When you execute the `install` command (or any other \"install\" commands "
"like `add` or `remove`), Poetry will check if it's currently inside a "
"virtualenv and, if not, will use an existing one or create a brand new one "
"for you to always work isolated from your global Python installation."
msgstr ""
"`install` コマンドを実行するとき (あるいは `add` コマンドや `remove` コマンドのような他の \"インストール\" "
"コマンド)、Poetryは現在は仮想環境の中なのかどうかを調べ、もしそうでなければ既存の仮想環境または新品の仮想環境を使い、グローバルにインストールされたPythonから常に隔離します。"

#. type: Plain text
#: docs/basic-usage.md:162
#, no-wrap
msgid ""
"    To create the virtualenv for the current project, Poetry will use\n"
"    the currently activated Python version.\n"
msgstr "    現在のプロジェクト用の仮想環境を作成するために、\n"
"    Poetryは現在有効になっているバージョンのPythonを使います。\n"

#. type: Plain text
#: docs/basic-usage.md:165
#, no-wrap
msgid ""
"    To easily switch between Python versions, it is recommended to\n"
"    use [pyenv](https://github.com/pyenv/pyenv) or similar tools.\n"
msgstr ""
"    Pythonのバージョンを簡単に切り替えるには、\n"
"    [pyenv](https://github.com/pyenv/pyenv) やそれに似たツールを使うのが推奨されます。\n"

#. type: Plain text
#: docs/basic-usage.md:168
#, no-wrap
msgid ""
"    For instance, if your project is Python 2.7 only, a standard workflow\n"
"    would be:\n"
msgstr "    例えば、プロジェクトがPython 2.7のみの場合、\n"
"    標準的な作業の流れは次のようになります:\n"

#. type: Plain text
#: docs/basic-usage.md:173
#, no-wrap
msgid ""
"    ```bash\n"
"    pyenv install 2.7.15\n"
"    pyenv local 2.7.15  # Activate Python 2.7 for the current project\n"
"    poetry install\n"
"    ```\n"
msgstr ""
"    ```bash\n"
"    pyenv install 2.7.15\n"
"    pyenv local 2.7.15  # Activate Python 2.7 for the current project\n"
"    poetry install\n"
"    ```\n"
